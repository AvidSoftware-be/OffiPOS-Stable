"""Subclass of MainFrameBase, which is generated by wxFormBuilder."""

import wx
from wxPython.grid import wxGrid
from DataModel.ProductScreen import ProductScreen
from DataModel.ScreenGroup import ScreenGroup
from DataModel.Ticket import Ticket, priceModes
from DataModel.Product import  Product
import GeneratedGui

# Implementing MainFrameBase
from Gui import *
from Gui.AdminDialog import AdminDialog
from Gui.PaymentFrame import PaymentFrame

class MainFrame(GeneratedGui.MainFrameBase):
    _selectedGroup = 1

    def __init__( self, parent ):
        GeneratedGui.MainFrameBase.__init__(self, parent)

        self.ticket = Ticket()

        #add product buttons to dictionary for later reference
        self.buttonDict = {
            self.btnProduct11: 11,
            self.btnProduct12: 12,
            self.btnProduct13: 13,
            self.btnProduct14: 14,
            self.btnProduct15: 15,
            self.btnProduct16: 16,
            self.btnProduct21: 21,
            self.btnProduct22: 22,
            self.btnProduct23: 23,
            self.btnProduct24: 24,
            self.btnProduct25: 25,
            self.btnProduct26: 26,
            self.btnProduct31: 31,
            self.btnProduct32: 32,
            self.btnProduct33: 33,
            self.btnProduct34: 34,
            self.btnProduct35: 35,
            self.btnProduct36: 36,
            self.btnProduct41: 41,
            self.btnProduct42: 42,
            self.btnProduct43: 43,
            self.btnProduct44: 44,
            self.btnProduct45: 45,
            self.btnProduct46: 46,
            self.btnProduct51: 51,
            self.btnProduct52: 52,
            self.btnProduct53: 53,
            self.btnProduct54: 54,
            self.btnProduct55: 55,
            self.btnProduct56: 56,
            self.btnProduct61: 61,
            self.btnProduct62: 62,
            self.btnProduct63: 63,
            self.btnProduct64: 64,
            self.btnProduct65: 65,
            self.btnProduct66: 66
        }

        self.pnlGroepen.Enabled = False
        self.pnlProducten.Enabled = False
        self.pnlRekening.Enabled = False
        self.pnlRekening.Enabled = False
        self.btnNieuwTicket.Enabled = True

        #Empty out Group Buttons
        self.btnGroupOne.Enabled = False
        self.btnGroupOne.SetLabel("")
        self.btnGroupTwo.Enabled = False
        self.btnGroupTwo.SetLabel("")
        self.btnGroupThree.Enabled = False
        self.btnGroupThree.SetLabel("")
        self.btnGroupFour.Enabled = False
        self.btnGroupFour.SetLabel("")
        self.btnGroupFive.Enabled = False
        self.btnGroupFive.SetLabel("")
        self.btnGroupSix.Enabled = False
        self.btnGroupSix.SetLabel("")
        self.btnGroupSeven.Enabled = False
        self.btnGroupSeven.SetLabel("")
        self.btnGroupEight.Enabled = False
        self.btnGroupEight.SetLabel("")

        #fill group buttons
        i = 1
        for name in ScreenGroup().fetchall():
            if i == 1:
                self.btnGroupOne.SetLabel(name[1].replace(" ","\n"))
            elif i == 2:
                self.btnGroupTwo.SetLabel(name[1].replace(" ","\n"))
            elif i == 3:
                self.btnGroupThree.SetLabel(name[1].replace(" ","\n"))
            elif i == 4:
                self.btnGroupFour.SetLabel(name[1].replace(" ","\n"))
            elif i == 5:
                self.btnGroupFive.SetLabel(name[1].replace(" ","\n"))
            elif i == 6:
                self.btnGroupSix.SetLabel(name[1].replace(" ","\n"))
            elif i == 7:
                self.btnGroupSeven.SetLabel(name[1].replace(" ","\n"))
            elif i == 8:
                self.btnGroupSeven.SetLabel(name[1].replace(" ","\n"))

            i = i + 1

        self._updateProductButtons()

        self.btnRetour.SetValue(0)


    # Handlers for MainFrameBase events.
    def btnNieuwTicketOnButtonClick( self, event ):
        self.pnlGroepen.Enabled = True
        self.pnlProducten.Enabled = True
        self.pnlRekening.Enabled = True
        self.btnNieuwTicket.Enabled = False

        self.ticket.CreateNewTicket()

        if self.ticket.eatInOut == "O":
            self.btnInOutToggle.SetValue(0)
        else:
            self.btnInOutToggle.SetValue(1)

        self._selectedGroup = 1
        self._updateProductButtons()

        self._updateGrid()

    def btnAnnulerenOnButtonClick( self, event ):
        self.pnlGroepen.Enabled = False
        self.pnlProducten.Enabled = False
        self.pnlRekening.Enabled = False
        self.btnNieuwTicket.Enabled = True

        self.ticket.CancelTicket()

        self._updateGrid()

    def btnAfrekekenOnButtonClick( self, event ):
        self.pnlGroepen.Enabled = False
        self.pnlProducten.Enabled = False
        self.pnlRekening.Enabled = False
        self.btnNieuwTicket.Enabled = True

        #self.ticket.PayTicket()
        frmPayment = PaymentFrame(self)
        frmPayment.SetTicket(self.ticket)
        frmPayment.ShowModal()

        if frmPayment.cancelled:
            self.pnlGroepen.Enabled = True
            self.pnlProducten.Enabled = True
            self.pnlRekening.Enabled = True
            self.btnNieuwTicket.Enabled = False


    def btnGroupOneOnButtonClick( self, event ):
        self._selectedGroup = 1
        self._updateProductButtons()

    def btnGroupTwoOnButtonClick( self, event ):
        self._selectedGroup = 2
        self._updateProductButtons()

    def btnGroupThreeOnButtonClick( self, event ):
        self._selectedGroup = 3
        self._updateProductButtons()

    def btnGroupFourOnButtonClick( self, event ):
        self._selectedGroup = 4
        self._updateProductButtons()

    def btnGroupFiveOnButtonClick( self, event ):
        self._selectedGroup = 5
        self._updateProductButtons()

    def btnGroupSixOnButtonClick( self, event ):
        self._selectedGroup = 6
        self._updateProductButtons()

    def btnGroupSevenOnButtonClick( self, event ):
        self._selectedGroup = 7
        self._updateProductButtons()

    def btnGroupEightOnButtonClick( self, event ):
        self._selectedGroup = 8
        self._updateProductButtons()

    def btnProductOnButtonClick( self, event ):
        thisButton = event.GetEventObject()
        buttonNoPressed = self.buttonDict[thisButton]

        productNo = 0
        isOption = False
        if self._selectedGroup == 0:
            #dit is een optie
            ticketLines = self.ticket.GetTicketLines()
            productNo = ProductScreen().GetOptionProductNoOnButton(buttonNoPressed,
                                                                   ticketLines[len(ticketLines)-1][3])
            isOption=True
        else:
            productNo = ProductScreen().GetProductNoOnButton(buttonNoPressed, self._selectedGroup)

        self.ticket.AddTicketLine(productNo, isOption)

        options = ProductScreen().GetOptionsForProduct(productNo)

        if options:
            self._updateProductButtonsForOption(productNo, options)

        if isOption:
            self._selectedGroup=1
            self._updateProductButtons()
            
        self._updateGrid()

    def btnInOutToggleOnToggleButton( self, event ):
        button = event.GetEventObject()
        if button.GetValue():
            self.ticket.SetEatInOut("I")
        else:
            self.ticket.SetEatInOut("O")

    def btnAdminOnButtonClick( self, event ):
        adminMenu = AdminDialog(self)
        adminMenu.ShowModal()

    def btnRetourOnToggleButton( self, event ):
        button = event.GetEventObject()
        if button.GetValue():
            self.ticket.priceMode = priceModes["neg"]
        else:
            self.ticket.priceMode = priceModes["pos"]

    def btnQtyMinOnButtonClick( self, event ):
        rowNo = self.gOrder.GetGridCursorRow()

        ticketLines = self.ticket.GetTicketLines()

        entryNo = ticketLines[rowNo][4]

        self.ticket.DeleteTickeLine(entryNo)

        self._updateGrid()
        

    def _updateProductButtonsForOption(self, productId, options):
        self._clearButtonNames()

        for option in options:
            product = Product(id=option[2])
            product.fill()

            control = getattr(self, "btnProduct%s" % (str(option[3])))
            control.SetLabel(product.name.strip())

        self._selectedGroup = 0


    def _updateProductButtons(self):
        self._clearButtonNames()

        productsInScreen = ProductScreen().GetProductsForScreen(self._selectedGroup)

        for productLine in productsInScreen:
            product = Product(id=productLine[2])
            product.fill()

            control = getattr(self, "btnProduct%s" % (str(productLine[3])))
            control.SetLabel(product.name.strip().replace(" ","\n"))

    def _clearButtonNames(self):
        r = 1
        c = 1
        for i in range(1, 37):
            buttonNo = c + r * 10
            control = getattr(self, "btnProduct%s" % (str(buttonNo)))
            control.SetLabel("")
            c = c + 1
            if c == 7:
                c = 1
                r = r + 1

    def _updateGrid(self):
        grid = self.gOrder
        table = OrderTable(ticket=self.ticket)
        grid.SetTable(table)
        grid.EnableEditing(False)
        grid.SetSelectionMode(wx.grid.Grid.SelectRows)
        grid.SetRowLabelSize(0)
        grid.AutoSizeColumns()

        self._updateTotal()

    def _updateTotal(self):
        total = self.ticket.GetTotalAmt()

        self.lblTotal.SetLabel(u"\u20AC %.2f" % total)


class OrderTable(wx.grid.PyGridTableBase):
    def __init__(self, ticket):
        wx.grid.PyGridTableBase.__init__(self)
        self.colLabels = ["#", "Product", "Prijs"]

        self.ticketLines = ticket.GetTicketLines()

    def GetNumberRows(self):
        return len(self.ticketLines)

    def GetNumberCols(self):
        return len(self.colLabels)

    def IsEmptyCell(self, row, col):
        return False

    def GetValue(self, row, col):
        if col == 0:
            return "%s" % (row + 1)
        elif col == 2:
            return "%.2f" % self.ticketLines[row][col - 1]
        else:
            return "%s" % self.ticketLines[row][col - 1]

    def SetValue(self, row, col, value):
        pass

    def GetColLabelValue(self, col):
        return self.colLabels[col]

    def GetRowLabelValue(self, row):
        return self.rowLabels[row]
        

