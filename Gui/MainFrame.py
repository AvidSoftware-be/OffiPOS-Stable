"""Subclass of MainFrameBase, which is generated by wxFormBuilder."""

import wx
from DataModel.ProductScreen import ProductScreen
from DataModel.ScreenGroup import ScreenGroup
from DataModel.Ticket import Ticket, priceModes, discountTypes
from DataModel.Product import  Product
import GeneratedGui

# Implementing MainFrameBase
from Gui import *
from Gui.AdminDialog import AdminDialog
from Gui.PaymentFrame import PaymentFrame
from Gui.dlgAskForPrice import dlgAskForPrice
import Gui.helpers

from datetime import date, datetime
import utils.dbmanip

class MainFrame(GeneratedGui.MainFrameBase):
    _selectedGroup = 1
    
    def __init__(self, parent):
        self._selectedGroup = 1
        
        GeneratedGui.MainFrameBase.__init__(self, parent)

        utils.dbmanip.CreateDB() #test of db bestaat en zo niet wordt hij aangemaakt
        
        self.pnlProducten = GeneratedGui.pnlProductenBase(self)
        self.sbProducten.Add(self.pnlProducten, 1, wx.EXPAND | wx.ALL, 1)

        self.ticket = Ticket()

        #add product buttons to dictionary for later reference
        self.buttonDict = Gui.helpers.createButtonDict(self)
        
        # Connect Events
        self.pnlProducten.btnProduct11.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct12.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct13.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct14.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct15.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct16.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct21.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct22.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct23.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct24.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct25.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct26.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct31.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct32.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct33.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct34.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct35.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct36.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct41.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct42.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct43.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct44.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct45.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct46.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct51.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct52.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct53.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct54.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct55.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct56.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct61.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct62.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct63.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct64.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct65.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct66.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct71.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct72.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct73.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct74.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct75.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)
        self.pnlProducten.btnProduct76.Bind(wx.EVT_BUTTON, self.btnProductOnButtonClick)

        self.pnlGroepen = GeneratedGui.pnlGroepenBase(self)
        self.sbGroepen.Add(self.pnlGroepen, 1, wx.EXPAND | wx.ALL, 1)
        #Empty out Group Buttons
        #self.btnGroupOne.Enabled = False
        self.pnlGroepen.btnGroupOne.SetLabel("")
        #self.btnGroupTwo.Enabled = False
        self.pnlGroepen.btnGroupTwo.SetLabel("")
        #self.btnGroupThree.Enabled = False
        self.pnlGroepen.btnGroupThree.SetLabel("")
        #self.btnGroupFour.Enabled = False
        self.pnlGroepen.btnGroupFour.SetLabel("")
        #self.btnGroupFive.Enabled = False
        self.pnlGroepen.btnGroupFive.SetLabel("")
        #self.btnGroupSix.Enabled = False
        self.pnlGroepen.btnGroupSix.SetLabel("")
        #self.btnGroupSeven.Enabled = False
        self.pnlGroepen.btnGroupSeven.SetLabel("")
        #self.btnGroupEight.Enabled = False
        self.pnlGroepen.btnGroupEight.SetLabel("")

        # Connect Events
        self.pnlGroepen.btnGroupOne.Bind(wx.EVT_BUTTON, self.btnGroupOneOnButtonClick)
        self.pnlGroepen.btnGroupThree.Bind(wx.EVT_BUTTON, self.btnGroupThreeOnButtonClick)
        self.pnlGroepen.btnGroupFive.Bind(wx.EVT_BUTTON, self.btnGroupFiveOnButtonClick)
        self.pnlGroepen.btnGroupSeven.Bind(wx.EVT_BUTTON, self.btnGroupSevenOnButtonClick)
        self.pnlGroepen.btnGroupTwo.Bind(wx.EVT_BUTTON, self.btnGroupTwoOnButtonClick)
        self.pnlGroepen.btnGroupFour.Bind(wx.EVT_BUTTON, self.btnGroupFourOnButtonClick)
        self.pnlGroepen.btnGroupSix.Bind(wx.EVT_BUTTON, self.btnGroupSixOnButtonClick)
        self.pnlGroepen.btnGroupEight.Bind(wx.EVT_BUTTON, self.btnGroupEightOnButtonClick)
        
        Gui.helpers.fillGroupButtons(self) #helper
        
        self.pnlGroepen.Disable()
        self.pnlProducten.Enabled = False
        self.pnlRekening.Enabled = False
        self.pnlRekening.Enabled = False
        self.btnNieuwTicket.Enabled = True

        Gui.helpers.updateProductButtons(self, self._selectedGroup)

        self.btnRetour.SetValue(0)
        self.btnAanbDirToggle.SetValue(0)

        if self.ticket.eatInOut == "O":
            self.btnInOutToggle.SetValue(0)
        else:
            self.btnInOutToggle.SetValue(1)

        self.timer = wx.Timer(self)
        self.Bind(wx.EVT_TIMER, self.updateClock, self.timer)
        self.timer.Start(1000)
        
        self.Maximize()

    def updateClock(self, event):
        self.SetStatusText("{0} {1}".format(date.today().strftime('%d/%m/%Y'), datetime.today().strftime('%H:%M:%S')))


    # Handlers for MainFrameBase events.
    def btnNieuwTicketOnButtonClick(self, event):

        self.ticket.CreateNewTicket()
        
        self._setScreenForOpenTicket()
        self.btnAnnuleren.Enable()
        
    def btnHeropenOnButtonClick(self, event):
        self.ticket.no = Ticket().GetMaxTicketNo()
        self._setScreenForOpenTicket()
        self.btnAnnuleren.Disable()

    def btnAnnulerenOnButtonClick(self, event):
        self.pnlGroepen.Disable()
        self.pnlProducten.Enabled = False
        self.pnlRekening.Enabled = False
        self.btnNieuwTicket.Enabled = True

        self.ticket.CancelTicket()

        self._updateGrid()

    def btnAfrekekenOnButtonClick(self, event):
        self.pnlGroepen.Disable()
        self.pnlProducten.Enabled = False
        self.pnlRekening.Enabled = False
        self.btnNieuwTicket.Enabled = True

        #self.ticket.PayTicket()
        frmPayment = PaymentFrame(self)
        frmPayment.SetTicket(self.ticket)
        frmPayment.ShowModal()

        if frmPayment.cancelled:
            self.pnlGroepen.Enable()
            self.pnlProducten.Enabled = True
            self.pnlRekening.Enabled = True
            self.btnNieuwTicket.Enabled = False
            self.ticket.KitchenPrinted = False

        self.btnRetour.Value = 0

    def btnGroupOneOnButtonClick(self, event):
        self._selectedGroup = 1
        Gui.helpers.updateProductButtons(self, self._selectedGroup)

    def btnGroupTwoOnButtonClick(self, event):
        self._selectedGroup = 2
        Gui.helpers.updateProductButtons(self, self._selectedGroup)

    def btnGroupThreeOnButtonClick(self, event):
        self._selectedGroup = 3
        Gui.helpers.updateProductButtons(self, self._selectedGroup)
        
    def btnGroupFourOnButtonClick(self, event):
        self._selectedGroup = 4
        Gui.helpers.updateProductButtons(self, self._selectedGroup)

    def btnGroupFiveOnButtonClick(self, event):
        self._selectedGroup = 5
        Gui.helpers.updateProductButtons(self, self._selectedGroup)

    def btnGroupSixOnButtonClick(self, event):
        self._selectedGroup = 6
        Gui.helpers.updateProductButtons(self, self._selectedGroup)

    def btnGroupSevenOnButtonClick(self, event):
        self._selectedGroup = 7
        Gui.helpers.updateProductButtons(self, self._selectedGroup)

    def btnGroupEightOnButtonClick(self, event):
        self._selectedGroup = 8
        Gui.helpers.updateProductButtons(self, self._selectedGroup)

    def btnProductOnButtonClick(self, event):
        thisButton = event.GetEventObject()
        buttonNoPressed = self.buttonDict[thisButton]

        productNo = 0
        isOption = False
        parentProductId = 0
        mydiscountType = discountTypes["none"]

        if not self._selectedGroup:
            #dit is een optie
            ticketLines = self.ticket.GetTicketLines()
            parentProductId = ticketLines[len(ticketLines) - 1][3]
            productNo = ProductScreen().GetOptionProductNoOnButton(buttonNoPressed,
                                                                   parentProductId)
            isOption = True
        else:
            productNo = ProductScreen().GetProductNoOnButton(buttonNoPressed, self._selectedGroup)

        product = Product(productNo)
        #product.fill()
        prodPrice = 0
        if product.askForPrice:
            #prijs ophalen
            askForPriceForm = dlgAskForPrice(self)
            askForPriceForm.ShowModal()

            if product.askForPrice == 2:
                prodPrice = askForPriceForm.Value * -1 #teken omdraaien, bvb in geval van korting
            else:
                prodPrice = askForPriceForm.Value

        if self.btnAanbDirToggle.Value:
            prodPrice = 0
            mydiscountType = discountTypes["Aanbieding Directie"]

        self.ticket.AddTicketLine(productNo, isOption, parentProductId, buttonNoPressed, self._selectedGroup, prodPrice,
                                  mydiscountType)

        options = ProductScreen().GetOptionsForProduct(productNo)

        if options:
            self._updateProductButtonsForOption(productNo, options)

        if isOption:
            self._selectedGroup = ProductScreen().GetNextScreenForOption(parentProductId, productNo, buttonNoPressed)
            Gui.helpers.updateProductButtons(self, self._selectedGroup)

        self._updateGrid()

    def btnInOutToggleOnToggleButton(self, event):
        button = event.GetEventObject()
        if button.GetValue():
            self.ticket.SetEatInOut("I")
        else:
            self.ticket.SetEatInOut("O")

    def btnAdminOnButtonClick(self, event):
        adminMenu = AdminDialog(self)
        adminMenu.ShowModal()

    def btnRetourOnToggleButton(self, event):
        button = event.GetEventObject()
        if button.GetValue():
            self.ticket.priceMode = priceModes["neg"]
        else:
            self.ticket.priceMode = priceModes["pos"]

    def btnQtyMinOnButtonClick(self, event):
        rowNo = self.gOrder.GetGridCursorRow()

        ticketLines = self.ticket.GetTicketLines()

        entryNo = ticketLines[rowNo][4]

        self.ticket.DeleteTickeLine(entryNo)

        self._updateGrid()


    def _updateProductButtonsForOption(self, productId, options):
        Gui.helpers.clearButtonNames(self)

        for option in options:
            product = Product(id=option[2])
            #product.fill()

            if product.id == 9999:
                #speciaal!
                caption = option[7]
            else:
                caption = product.screenName

            control = getattr(self.pnlProducten, "btnProduct%s" % (str(option[3])))
            control.SetLabel(caption.strip().replace(" ", "\n"))
            control.SetBackgroundColour(option[5])
            control.Refresh()

        self._selectedGroup = 0



    def _updateGrid(self):
        grid = self.gOrder
        table = OrderTable(ticket=self.ticket)
        grid.SetTable(table)
        rows = table.GetNumberRows()
        grid.MakeCellVisible(rows - 1, 1)
        grid.EnableEditing(False)
        grid.SetSelectionMode(wx.grid.Grid.SelectRows)
        grid.SetRowLabelSize(0)
        grid.AutoSizeColumns()

        self._updateTotal()

    def _updateTotal(self):
        total = self.ticket.GetTotalAmt()

        self.lblTotal.SetLabel(u"\u20AC %.2f" % total)

    def _setScreenForOpenTicket(self):
        self.pnlGroepen.Enable()
        self.pnlProducten.Enabled = True
        self.pnlRekening.Enabled = True
        self.btnNieuwTicket.Enabled = False
        if self.ticket.eatInOut == "O":
            self.btnInOutToggle.SetValue(0)
        else:
            self.btnInOutToggle.SetValue(1)
        self.btnRetour.SetValue(0)
        self.ticket.priceMode = priceModes["pos"]
        self.btnAanbDirToggle.SetValue(0)
        self._selectedGroup = 1
        Gui.helpers.updateProductButtons(self,self._selectedGroup)
        self._updateGrid()

class OrderTable(wx.grid.PyGridTableBase):
    def __init__(self, ticket):
        wx.grid.PyGridTableBase.__init__(self)
        self.colLabels = ["#", "Product", "Prijs"]

        self.ticketLines = ticket.GetTicketLines()

    def GetNumberRows(self):
        return len(self.ticketLines)

    def GetNumberCols(self):
        return len(self.colLabels)

    def IsEmptyCell(self, row, col):
        return False

    def GetValue(self, row, col):
        if col == 0:
            return "%s" % (row + 1)
        elif col == 2:
            return "%.2f" % self.ticketLines[row][col - 1]
        else:
            return "%s" % self.ticketLines[row][col - 1]

    def SetValue(self, row, col, value):
        pass

    def GetColLabelValue(self, col):
        return self.colLabels[col]

    def GetRowLabelValue(self, row):
        return self.rowLabels[row]
        

